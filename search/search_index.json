{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Macro Web Framework","text":"<p>Macro is a simple and lightweight web framework for handling HTTP requests with support for dynamic paths and type casting. It is designed to be easy to use and integrate with ASGI applications.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Dynamic Routing: Define routes with dynamic path segments.</li> <li>Type Casting: Automatically cast path variables to the appropriate types.</li> <li>Response Handling: Easily create and send various types of HTTP responses.</li> <li>ASGI Compatibility: Fully compatible with ASGI applications.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install Macro, use pip:</p> <pre><code>pip install git+https://github.com/externref/macro\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Here's a quick example to get you started with Macro:</p> <pre><code>from macro.server import Macro\nfrom macro.response import Response\n\napp = Macro()\n\n@app.route(\"/\", method=\"GET\")\nasync def homepage(request, response_cls):\n    return response_cls.text(\"Welcome to Macro!\")\n\n@app.route(\"/hello/{name}\", method=\"GET\")\nasync def greet(request, response_cls, name: str):\n    return response_cls.text(f\"Hello, {name}!\")\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\n</code></pre>"},{"location":"api/request/","title":"Request","text":""},{"location":"api/request/#macro.request.Request","title":"<code>Request</code>","text":"<p>A class representing an HTTP request.</p> <p>Attributes:     headers (RequestHeader): HTTP headers.     body (bytes): Request body.     _parsed_body (dict | None): Parsed body cache.     _parsed_query (dict | None): Parsed query cache.</p> Source code in <code>macro\\request.py</code> <pre><code>@attrs.define\nclass Request:\n    \"\"\"\n    A class representing an HTTP request.\n\n    Attributes:\n        headers (RequestHeader): HTTP headers.\n        body (bytes): Request body.\n        _parsed_body (dict | None): Parsed body cache.\n        _parsed_query (dict | None): Parsed query cache.\n    \"\"\"\n\n    headers: RequestHeader = attrs.field()\n    body: bytes = attrs.field(default=b\"\")\n    _parsed_body: dict | None = attrs.field(default=None, init=False)\n    _parsed_query: dict | None = attrs.field(default=None, init=False)\n\n    @classmethod\n    def from_scope_and_body(cls, scope: dict[str, Any], body: bytes) -&gt; Request:\n        \"\"\"\n        Create a Request object from ASGI scope and body.\n\n        :param scope: ASGI scope dictionary.\n        :param body: Request body as bytes.\n        :return: Request object.\n        \"\"\"\n        headers = RequestHeader()\n        headers._method = scope.get(\"method\", \"\")\n        headers._path = scope.get(\"path\", \"\")\n        headers._http_version = f\"HTTP/{scope.get('http_version', '1.1')}\"\n\n        for name, value in scope.get(\"headers\", []):\n            headers[name.decode(\"latin1\")] = value.decode(\"latin1\")\n\n        return cls(headers=headers, body=body)\n\n    @classmethod\n    def from_raw_data(cls, header_data: bytes, body: bytes) -&gt; Request:\n        \"\"\"\n        Create a Request object from raw header data and body.\n\n        :param header_data: Raw header data as bytes.\n        :param body: Request body as bytes.\n        :return: Request object.\n        \"\"\"\n        headers = RequestHeader.from_raw_headers(header_data)\n        return cls(headers=headers, body=body)\n\n    @property\n    def method(self) -&gt; str:\n        \"\"\"\n        Get the HTTP method.\n\n        :return: HTTP method as a string.\n        \"\"\"\n        return self.headers.method\n\n    @property\n    def path(self) -&gt; str:\n        \"\"\"\n        Get the request path.\n\n        :return: Request path as a string.\n        \"\"\"\n        return self.headers.path\n\n    @property\n    def http_version(self) -&gt; str:\n        \"\"\"\n        Get the HTTP version.\n\n        :return: HTTP version as a string.\n        \"\"\"\n        return self.headers.http_version\n\n    @property\n    def content_type(self) -&gt; str | None:\n        \"\"\"\n        Get the Content-Type header.\n\n        :return: Content-Type as a string or None.\n        \"\"\"\n        return self.headers.content_type\n\n    @property\n    def content_length(self) -&gt; int | None:\n        \"\"\"\n        Get the Content-Length header.\n\n        :return: Content-Length as an integer or None.\n        \"\"\"\n        return self.headers.content_length\n\n    @property\n    def host(self) -&gt; str | None:\n        \"\"\"\n        Get the Host header.\n\n        :return: Host as a string or None.\n        \"\"\"\n        return self.headers.host\n\n    @property\n    def is_json(self) -&gt; bool:\n        \"\"\"\n        Check if the request is JSON.\n\n        :return: True if Content-Type is application/json, else False.\n        \"\"\"\n        return self.headers.is_json\n\n    @property\n    def is_form_data(self) -&gt; bool:\n        \"\"\"\n        Check if the request is form data.\n\n        :return: True if Content-Type is application/x-www-form-urlencoded, else False.\n        \"\"\"\n        return self.headers.is_form_data\n\n    @property\n    def query_string(self) -&gt; str:\n        \"\"\"\n        Get the query string from the request path.\n\n        :return: Query string as a string.\n        \"\"\"\n        if \"?\" in self.path:\n            return self.path.split(\"?\", 1)[1]\n        return \"\"\n\n    @property\n    def path_without_query(self) -&gt; str:\n        \"\"\"\n        Get the request path without the query string.\n\n        :return: Path without query string as a string.\n        \"\"\"\n        if \"?\" in self.path:\n            return self.path.split(\"?\", 1)[0]\n        return self.path\n\n    @property\n    def query(self) -&gt; dict[str, str | list[str]]:\n        \"\"\"\n        Get the parsed query parameters.\n\n        :return: Parsed query parameters as a dictionary.\n        \"\"\"\n        if self._parsed_query is None:\n            query_string = self.query_string\n            if query_string:\n                parsed = parse_qs(query_string)\n                self._parsed_query = {\n                    k: v[0] if len(v) == 1 else v for k, v in parsed.items()\n                }\n            else:\n                self._parsed_query = {}\n        return self._parsed_query\n\n    async def json(self) -&gt; Any:\n        \"\"\"\n        Parse and return the request body as JSON.\n\n        :return: Parsed JSON data.\n        :raises ValueError: If Content-Type is not application/json.\n        \"\"\"\n        if not self.is_json:\n            raise ValueError(\"Request Content-Type is not application/json\")\n\n        if self._parsed_body is None:\n            if not self.body:\n                return None\n            loop = asyncio.get_event_loop()\n            self._parsed_body = await loop.run_in_executor(\n                None, lambda: json.loads(self.body.decode(\"utf-8\"))\n            )\n\n        return self._parsed_body\n\n    async def form(self) -&gt; dict[str, str | list[str]]:\n        \"\"\"\n        Parse and return the request body as form data.\n\n        :return: Parsed form data as a dictionary.\n        :raises ValueError: If Content-Type is not application/x-www-form-urlencoded.\n        \"\"\"\n        if not self.is_form_data:\n            raise ValueError(\n                \"Request Content-Type is not application/x-www-form-urlencoded\"\n            )\n\n        if self._parsed_body is None:\n            if not self.body:\n                return {}\n            loop = asyncio.get_event_loop()\n            form_data = await loop.run_in_executor(\n                None, lambda: parse_qs(self.body.decode(\"utf-8\"))\n            )\n            self._parsed_body = {\n                k: v[0] if len(v) == 1 else v for k, v in form_data.items()\n            }\n\n        return self._parsed_body\n\n    async def text(self) -&gt; str:\n        \"\"\"\n        Return the request body as text.\n\n        :return: Request body as a string.\n        \"\"\"\n        loop = asyncio.get_event_loop()\n        return await loop.run_in_executor(\n            None, lambda: self.body.decode(\"utf-8\", errors=\"replace\")\n        )\n\n    def raw(self) -&gt; bytes:\n        \"\"\"\n        Return the raw request body.\n\n        :return: Request body as bytes.\n        \"\"\"\n        return self.body\n\n    def __str__(self) -&gt; str:\n        parts = [str(self.headers)]\n        if self.body:\n            parts.append(\"\")\n            parts.append(self.body.decode(\"utf-8\", errors=\"replace\"))\n        return \"\\n\".join(parts)\n</code></pre>"},{"location":"api/request/#macro.request.Request.content_length","title":"<code>content_length</code>  <code>property</code>","text":"<p>Get the Content-Length header.</p> <p>Returns:</p> Type Description <code>int | None</code> <p>Content-Length as an integer or None.</p>"},{"location":"api/request/#macro.request.Request.content_type","title":"<code>content_type</code>  <code>property</code>","text":"<p>Get the Content-Type header.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>Content-Type as a string or None.</p>"},{"location":"api/request/#macro.request.Request.host","title":"<code>host</code>  <code>property</code>","text":"<p>Get the Host header.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>Host as a string or None.</p>"},{"location":"api/request/#macro.request.Request.http_version","title":"<code>http_version</code>  <code>property</code>","text":"<p>Get the HTTP version.</p> <p>Returns:</p> Type Description <code>str</code> <p>HTTP version as a string.</p>"},{"location":"api/request/#macro.request.Request.is_form_data","title":"<code>is_form_data</code>  <code>property</code>","text":"<p>Check if the request is form data.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if Content-Type is application/x-www-form-urlencoded, else False.</p>"},{"location":"api/request/#macro.request.Request.is_json","title":"<code>is_json</code>  <code>property</code>","text":"<p>Check if the request is JSON.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if Content-Type is application/json, else False.</p>"},{"location":"api/request/#macro.request.Request.method","title":"<code>method</code>  <code>property</code>","text":"<p>Get the HTTP method.</p> <p>Returns:</p> Type Description <code>str</code> <p>HTTP method as a string.</p>"},{"location":"api/request/#macro.request.Request.path","title":"<code>path</code>  <code>property</code>","text":"<p>Get the request path.</p> <p>Returns:</p> Type Description <code>str</code> <p>Request path as a string.</p>"},{"location":"api/request/#macro.request.Request.path_without_query","title":"<code>path_without_query</code>  <code>property</code>","text":"<p>Get the request path without the query string.</p> <p>Returns:</p> Type Description <code>str</code> <p>Path without query string as a string.</p>"},{"location":"api/request/#macro.request.Request.query","title":"<code>query</code>  <code>property</code>","text":"<p>Get the parsed query parameters.</p> <p>Returns:</p> Type Description <code>dict[str, str | list[str]]</code> <p>Parsed query parameters as a dictionary.</p>"},{"location":"api/request/#macro.request.Request.query_string","title":"<code>query_string</code>  <code>property</code>","text":"<p>Get the query string from the request path.</p> <p>Returns:</p> Type Description <code>str</code> <p>Query string as a string.</p>"},{"location":"api/request/#macro.request.Request.form","title":"<code>form()</code>  <code>async</code>","text":"<p>Parse and return the request body as form data.</p> <p>Returns:</p> Type Description <code>dict[str, str | list[str]]</code> <p>Parsed form data as a dictionary.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If Content-Type is not application/x-www-form-urlencoded.</p> Source code in <code>macro\\request.py</code> <pre><code>async def form(self) -&gt; dict[str, str | list[str]]:\n    \"\"\"\n    Parse and return the request body as form data.\n\n    :return: Parsed form data as a dictionary.\n    :raises ValueError: If Content-Type is not application/x-www-form-urlencoded.\n    \"\"\"\n    if not self.is_form_data:\n        raise ValueError(\n            \"Request Content-Type is not application/x-www-form-urlencoded\"\n        )\n\n    if self._parsed_body is None:\n        if not self.body:\n            return {}\n        loop = asyncio.get_event_loop()\n        form_data = await loop.run_in_executor(\n            None, lambda: parse_qs(self.body.decode(\"utf-8\"))\n        )\n        self._parsed_body = {\n            k: v[0] if len(v) == 1 else v for k, v in form_data.items()\n        }\n\n    return self._parsed_body\n</code></pre>"},{"location":"api/request/#macro.request.Request.from_raw_data","title":"<code>from_raw_data(header_data, body)</code>  <code>classmethod</code>","text":"<p>Create a Request object from raw header data and body.</p> <p>Parameters:</p> Name Type Description Default <code>header_data</code> <code>bytes</code> <p>Raw header data as bytes.</p> required <code>body</code> <code>bytes</code> <p>Request body as bytes.</p> required <p>Returns:</p> Type Description <code>Request</code> <p>Request object.</p> Source code in <code>macro\\request.py</code> <pre><code>@classmethod\ndef from_raw_data(cls, header_data: bytes, body: bytes) -&gt; Request:\n    \"\"\"\n    Create a Request object from raw header data and body.\n\n    :param header_data: Raw header data as bytes.\n    :param body: Request body as bytes.\n    :return: Request object.\n    \"\"\"\n    headers = RequestHeader.from_raw_headers(header_data)\n    return cls(headers=headers, body=body)\n</code></pre>"},{"location":"api/request/#macro.request.Request.from_scope_and_body","title":"<code>from_scope_and_body(scope, body)</code>  <code>classmethod</code>","text":"<p>Create a Request object from ASGI scope and body.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>dict[str, Any]</code> <p>ASGI scope dictionary.</p> required <code>body</code> <code>bytes</code> <p>Request body as bytes.</p> required <p>Returns:</p> Type Description <code>Request</code> <p>Request object.</p> Source code in <code>macro\\request.py</code> <pre><code>@classmethod\ndef from_scope_and_body(cls, scope: dict[str, Any], body: bytes) -&gt; Request:\n    \"\"\"\n    Create a Request object from ASGI scope and body.\n\n    :param scope: ASGI scope dictionary.\n    :param body: Request body as bytes.\n    :return: Request object.\n    \"\"\"\n    headers = RequestHeader()\n    headers._method = scope.get(\"method\", \"\")\n    headers._path = scope.get(\"path\", \"\")\n    headers._http_version = f\"HTTP/{scope.get('http_version', '1.1')}\"\n\n    for name, value in scope.get(\"headers\", []):\n        headers[name.decode(\"latin1\")] = value.decode(\"latin1\")\n\n    return cls(headers=headers, body=body)\n</code></pre>"},{"location":"api/request/#macro.request.Request.json","title":"<code>json()</code>  <code>async</code>","text":"<p>Parse and return the request body as JSON.</p> <p>Returns:</p> Type Description <code>Any</code> <p>Parsed JSON data.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If Content-Type is not application/json.</p> Source code in <code>macro\\request.py</code> <pre><code>async def json(self) -&gt; Any:\n    \"\"\"\n    Parse and return the request body as JSON.\n\n    :return: Parsed JSON data.\n    :raises ValueError: If Content-Type is not application/json.\n    \"\"\"\n    if not self.is_json:\n        raise ValueError(\"Request Content-Type is not application/json\")\n\n    if self._parsed_body is None:\n        if not self.body:\n            return None\n        loop = asyncio.get_event_loop()\n        self._parsed_body = await loop.run_in_executor(\n            None, lambda: json.loads(self.body.decode(\"utf-8\"))\n        )\n\n    return self._parsed_body\n</code></pre>"},{"location":"api/request/#macro.request.Request.raw","title":"<code>raw()</code>","text":"<p>Return the raw request body.</p> <p>Returns:</p> Type Description <code>bytes</code> <p>Request body as bytes.</p> Source code in <code>macro\\request.py</code> <pre><code>def raw(self) -&gt; bytes:\n    \"\"\"\n    Return the raw request body.\n\n    :return: Request body as bytes.\n    \"\"\"\n    return self.body\n</code></pre>"},{"location":"api/request/#macro.request.Request.text","title":"<code>text()</code>  <code>async</code>","text":"<p>Return the request body as text.</p> <p>Returns:</p> Type Description <code>str</code> <p>Request body as a string.</p> Source code in <code>macro\\request.py</code> <pre><code>async def text(self) -&gt; str:\n    \"\"\"\n    Return the request body as text.\n\n    :return: Request body as a string.\n    \"\"\"\n    loop = asyncio.get_event_loop()\n    return await loop.run_in_executor(\n        None, lambda: self.body.decode(\"utf-8\", errors=\"replace\")\n    )\n</code></pre>"},{"location":"api/request/#macro.request.RequestHeader","title":"<code>RequestHeader</code>","text":"<p>A class representing HTTP request headers.</p> <p>Attributes:     _headers (dict[str, str]): Dictionary of headers.     _method (str): HTTP method.     _path (str): Request path.     _http_version (str): HTTP version.</p> Source code in <code>macro\\request.py</code> <pre><code>@attrs.define\nclass RequestHeader:\n    \"\"\"\n    A class representing HTTP request headers.\n\n    Attributes:\n        _headers (dict[str, str]): Dictionary of headers.\n        _method (str): HTTP method.\n        _path (str): Request path.\n        _http_version (str): HTTP version.\n    \"\"\"\n\n    _headers: dict[str, str] = attrs.field(factory=dict)\n    _method: str = attrs.field(default=\"\")\n    _path: str = attrs.field(default=\"\")\n    _http_version: str = attrs.field(default=\"\")\n\n    @classmethod\n    def from_raw_headers(cls, header_data: bytes) -&gt; RequestHeader:\n        \"\"\"\n        Create a RequestHeader object from raw header data.\n\n        :param header_data: Raw header data as bytes.\n        :return: RequestHeader object.\n        \"\"\"\n        header_obj = cls()\n        lines = header_data.decode(\"utf-8\", errors=\"replace\").split(\"\\r\\n\")\n\n        if lines and \" \" in lines[0]:\n            request_parts = lines[0].split(\" \")\n            if len(request_parts) &gt;= 3:\n                header_obj._method = request_parts[0]\n                header_obj._path = request_parts[1]\n                header_obj._http_version = request_parts[2]\n        for line in lines[1:]:\n            if \":\" in line:\n                key, value = line.split(\":\", 1)\n                header_obj[key.strip()] = value.strip()\n\n        return header_obj\n\n    @classmethod\n    def from_lines(cls, lines: list[str]) -&gt; RequestHeader:\n        \"\"\"\n        Create a RequestHeader object from header lines.\n\n        :param lines: List of header lines as strings.\n        :return: RequestHeader object.\n        \"\"\"\n        header_obj = cls()\n        if lines and \" \" in lines[0]:\n            request_parts = lines[0].split(\" \")\n            if len(request_parts) &gt;= 3:\n                header_obj._method = request_parts[0]\n                header_obj._path = request_parts[1]\n                header_obj._http_version = request_parts[2]\n        for line in lines[1:]:\n            if \":\" in line:\n                key, value = line.split(\":\", 1)\n                header_obj[key.strip()] = value.strip()\n\n        return header_obj\n\n    def __getitem__(self, key: str) -&gt; str:\n        return self._headers[key.lower()]\n\n    def __setitem__(self, key: str, value: str) -&gt; None:\n        self._headers[key.lower()] = str(value)\n\n    def __contains__(self, key: str) -&gt; bool:\n        return key.lower() in self._headers\n\n    def get(self, key: str, default: Any = None) -&gt; str:\n        \"\"\"\n        Get a header value by key with a default.\n\n        :param key: Header name.\n        :param default: Default value if header does not exist.\n        :return: Header value as a string or default.\n        \"\"\"\n        return self._headers.get(key.lower(), default)\n\n    def items(self) -&gt; Iterator[tuple[str, str]]:\n        \"\"\"\n        Get an iterator of header items.\n\n        :return: Iterator of header items as (key, value) tuples.\n        \"\"\"\n        return self._headers.items()\n\n    @property\n    def method(self) -&gt; str:\n        \"\"\"\n        Get the HTTP method.\n\n        :return: HTTP method as a string.\n        \"\"\"\n        return self._method\n\n    @property\n    def path(self) -&gt; str:\n        \"\"\"\n        Get the request path.\n\n        :return: Request path as a string.\n        \"\"\"\n        return self._path\n\n    @property\n    def http_version(self) -&gt; str:\n        \"\"\"\n        Get the HTTP version.\n\n        :return: HTTP version as a string.\n        \"\"\"\n        return self._http_version\n\n    @property\n    def content_type(self) -&gt; str | None:\n        \"\"\"\n        Get the Content-Type header.\n\n        :return: Content-Type as a string or None.\n        \"\"\"\n        return self.get(\"content-type\")\n\n    @property\n    def content_length(self) -&gt; int | None:\n        \"\"\"\n        Get the Content-Length header.\n\n        :return: Content-Length as an integer or None.\n        \"\"\"\n        length = self.get(\"content-length\")\n        if length is not None:\n            try:\n                return int(length)\n            except ValueError:\n                pass\n        return None\n\n    @property\n    def host(self) -&gt; str | None:\n        \"\"\"\n        Get the Host header.\n\n        :return: Host as a string or None.\n        \"\"\"\n        return self.get(\"host\")\n\n    @property\n    def user_agent(self) -&gt; str | None:\n        \"\"\"\n        Get the User-Agent header.\n\n        :return: User-Agent as a string or None.\n        \"\"\"\n        return self.get(\"user-agent\")\n\n    @property\n    def is_json(self) -&gt; bool:\n        \"\"\"\n        Check if the request is JSON.\n\n        :return: True if Content-Type is application/json, else False.\n        \"\"\"\n        content_type = self.content_type\n        return content_type is not None and \"application/json\" in content_type.lower()\n\n    @property\n    def is_form_data(self) -&gt; bool:\n        \"\"\"\n        Check if the request is form data.\n\n        :return: True if Content-Type is application/x-www-form-urlencoded, else False.\n        \"\"\"\n        content_type = self.content_type\n        return (\n            content_type is not None\n            and \"application/x-www-form-urlencoded\" in content_type.lower()\n        )\n\n    def __str__(self) -&gt; str:\n        parts = []\n        if self._method and self._path and self._http_version:\n            parts.append(f\"{self._method} {self._path} {self._http_version}\")\n        if self._headers:\n            max_key_length = max((len(key) for key in self._headers.keys()), default=0)\n            priority_headers = [\"host\", \"content-type\", \"content-length\", \"user-agent\"]\n            for priority_key in priority_headers:\n                if priority_key in self._headers:\n                    key_display = priority_key.title()\n                    value = self._headers[priority_key]\n                    parts.append(f\"{key_display:&lt;{max_key_length + 2}}: {value}\")\n            for key, value in sorted(self._headers.items()):\n                if key not in priority_headers:\n                    key_display = key.title()\n                    parts.append(f\"{key_display:&lt;{max_key_length + 2}}: {value}\")\n\n        return \"\\n\".join(parts)\n</code></pre>"},{"location":"api/request/#macro.request.RequestHeader.content_length","title":"<code>content_length</code>  <code>property</code>","text":"<p>Get the Content-Length header.</p> <p>Returns:</p> Type Description <code>int | None</code> <p>Content-Length as an integer or None.</p>"},{"location":"api/request/#macro.request.RequestHeader.content_type","title":"<code>content_type</code>  <code>property</code>","text":"<p>Get the Content-Type header.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>Content-Type as a string or None.</p>"},{"location":"api/request/#macro.request.RequestHeader.host","title":"<code>host</code>  <code>property</code>","text":"<p>Get the Host header.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>Host as a string or None.</p>"},{"location":"api/request/#macro.request.RequestHeader.http_version","title":"<code>http_version</code>  <code>property</code>","text":"<p>Get the HTTP version.</p> <p>Returns:</p> Type Description <code>str</code> <p>HTTP version as a string.</p>"},{"location":"api/request/#macro.request.RequestHeader.is_form_data","title":"<code>is_form_data</code>  <code>property</code>","text":"<p>Check if the request is form data.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if Content-Type is application/x-www-form-urlencoded, else False.</p>"},{"location":"api/request/#macro.request.RequestHeader.is_json","title":"<code>is_json</code>  <code>property</code>","text":"<p>Check if the request is JSON.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if Content-Type is application/json, else False.</p>"},{"location":"api/request/#macro.request.RequestHeader.method","title":"<code>method</code>  <code>property</code>","text":"<p>Get the HTTP method.</p> <p>Returns:</p> Type Description <code>str</code> <p>HTTP method as a string.</p>"},{"location":"api/request/#macro.request.RequestHeader.path","title":"<code>path</code>  <code>property</code>","text":"<p>Get the request path.</p> <p>Returns:</p> Type Description <code>str</code> <p>Request path as a string.</p>"},{"location":"api/request/#macro.request.RequestHeader.user_agent","title":"<code>user_agent</code>  <code>property</code>","text":"<p>Get the User-Agent header.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>User-Agent as a string or None.</p>"},{"location":"api/request/#macro.request.RequestHeader.from_lines","title":"<code>from_lines(lines)</code>  <code>classmethod</code>","text":"<p>Create a RequestHeader object from header lines.</p> <p>Parameters:</p> Name Type Description Default <code>lines</code> <code>list[str]</code> <p>List of header lines as strings.</p> required <p>Returns:</p> Type Description <code>RequestHeader</code> <p>RequestHeader object.</p> Source code in <code>macro\\request.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: list[str]) -&gt; RequestHeader:\n    \"\"\"\n    Create a RequestHeader object from header lines.\n\n    :param lines: List of header lines as strings.\n    :return: RequestHeader object.\n    \"\"\"\n    header_obj = cls()\n    if lines and \" \" in lines[0]:\n        request_parts = lines[0].split(\" \")\n        if len(request_parts) &gt;= 3:\n            header_obj._method = request_parts[0]\n            header_obj._path = request_parts[1]\n            header_obj._http_version = request_parts[2]\n    for line in lines[1:]:\n        if \":\" in line:\n            key, value = line.split(\":\", 1)\n            header_obj[key.strip()] = value.strip()\n\n    return header_obj\n</code></pre>"},{"location":"api/request/#macro.request.RequestHeader.from_raw_headers","title":"<code>from_raw_headers(header_data)</code>  <code>classmethod</code>","text":"<p>Create a RequestHeader object from raw header data.</p> <p>Parameters:</p> Name Type Description Default <code>header_data</code> <code>bytes</code> <p>Raw header data as bytes.</p> required <p>Returns:</p> Type Description <code>RequestHeader</code> <p>RequestHeader object.</p> Source code in <code>macro\\request.py</code> <pre><code>@classmethod\ndef from_raw_headers(cls, header_data: bytes) -&gt; RequestHeader:\n    \"\"\"\n    Create a RequestHeader object from raw header data.\n\n    :param header_data: Raw header data as bytes.\n    :return: RequestHeader object.\n    \"\"\"\n    header_obj = cls()\n    lines = header_data.decode(\"utf-8\", errors=\"replace\").split(\"\\r\\n\")\n\n    if lines and \" \" in lines[0]:\n        request_parts = lines[0].split(\" \")\n        if len(request_parts) &gt;= 3:\n            header_obj._method = request_parts[0]\n            header_obj._path = request_parts[1]\n            header_obj._http_version = request_parts[2]\n    for line in lines[1:]:\n        if \":\" in line:\n            key, value = line.split(\":\", 1)\n            header_obj[key.strip()] = value.strip()\n\n    return header_obj\n</code></pre>"},{"location":"api/request/#macro.request.RequestHeader.get","title":"<code>get(key, default=None)</code>","text":"<p>Get a header value by key with a default.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Header name.</p> required <code>default</code> <code>Any</code> <p>Default value if header does not exist.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>Header value as a string or default.</p> Source code in <code>macro\\request.py</code> <pre><code>def get(self, key: str, default: Any = None) -&gt; str:\n    \"\"\"\n    Get a header value by key with a default.\n\n    :param key: Header name.\n    :param default: Default value if header does not exist.\n    :return: Header value as a string or default.\n    \"\"\"\n    return self._headers.get(key.lower(), default)\n</code></pre>"},{"location":"api/request/#macro.request.RequestHeader.items","title":"<code>items()</code>","text":"<p>Get an iterator of header items.</p> <p>Returns:</p> Type Description <code>Iterator[tuple[str, str]]</code> <p>Iterator of header items as (key, value) tuples.</p> Source code in <code>macro\\request.py</code> <pre><code>def items(self) -&gt; Iterator[tuple[str, str]]:\n    \"\"\"\n    Get an iterator of header items.\n\n    :return: Iterator of header items as (key, value) tuples.\n    \"\"\"\n    return self._headers.items()\n</code></pre>"},{"location":"api/response/","title":"Response","text":""},{"location":"api/response/#macro.response.HTMLResponse","title":"<code>HTMLResponse</code>","text":"<p>               Bases: <code>Response</code></p> <p>A class representing an HTML response.</p> <p>Inherits from Response.</p> <p>Attributes:     content (str): HTML content as a string.     status (int): HTTP status code.</p> Source code in <code>macro\\response.py</code> <pre><code>class HTMLResponse(Response):\n    \"\"\"\n    A class representing an HTML response.\n\n    Inherits from Response.\n\n    Attributes:\n        content (str): HTML content as a string.\n        status (int): HTTP status code.\n    \"\"\"\n\n    def __init__(self, content: str, status: int = 200):\n        super().__init__(\n            status=status,\n            headers={\"Content-Type\": \"text/html; charset=utf-8\"},\n            body=content.encode(\"utf-8\"),\n        )\n</code></pre>"},{"location":"api/response/#macro.response.HTMLResponse.error","title":"<code>error(message='Internal Server Error', status=500)</code>  <code>classmethod</code>","text":"<p>Create an error response.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Error message.</p> <code>'Internal Server Error'</code> <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>500</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef error(\n    cls, message: str = \"Internal Server Error\", status: int = 500\n) -&gt; Response:\n    \"\"\"\n    Create an error response.\n\n    :param message: Error message.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"text/plain; charset=utf-8\"},\n        body=message.encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.HTMLResponse.html","title":"<code>html(content, status=200)</code>  <code>classmethod</code>","text":"<p>Create an HTML response.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>HTML content as a string.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>200</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef html(cls, content: str, status: int = 200) -&gt; Response:\n    \"\"\"\n    Create an HTML response.\n\n    :param content: HTML content as a string.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"text/html; charset=utf-8\"},\n        body=content.encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.HTMLResponse.json","title":"<code>json(data, status=200)</code>  <code>classmethod</code>","text":"<p>Create a JSON response.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>Data to be serialized to JSON.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>200</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef json(cls, data: Any, status: int = 200) -&gt; Response:\n    \"\"\"\n    Create a JSON response.\n\n    :param data: Data to be serialized to JSON.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"application/json\"},\n        body=json.dumps(data).encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.HTMLResponse.prepare_headers","title":"<code>prepare_headers()</code>","text":"<p>Prepare headers for the response.</p> <p>Returns:</p> Type Description <code>list[tuple[bytes, bytes]]</code> <p>List of headers as tuples of bytes.</p> Source code in <code>macro\\response.py</code> <pre><code>def prepare_headers(self) -&gt; list[tuple[bytes, bytes]]:\n    \"\"\"\n    Prepare headers for the response.\n\n    :return: List of headers as tuples of bytes.\n    \"\"\"\n    final_headers = dict(self.headers)\n\n    if \"Content-Length\" not in final_headers:\n        final_headers[\"Content-Length\"] = str(len(self.body))\n\n    return [\n        (key.lower().encode(\"latin1\"), value.encode(\"latin1\"))\n        for key, value in final_headers.items()\n    ]\n</code></pre>"},{"location":"api/response/#macro.response.HTMLResponse.redirect","title":"<code>redirect(location, status=302)</code>  <code>classmethod</code>","text":"<p>Create a redirect response.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>str</code> <p>URL to redirect to.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>302</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef redirect(cls, location: str, status: int = 302) -&gt; Response:\n    \"\"\"\n    Create a redirect response.\n\n    :param location: URL to redirect to.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Location\": location},\n        body=f\"Redirecting to {location}\".encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.HTMLResponse.send","title":"<code>send(send_func)</code>  <code>async</code>","text":"<p>Send the response using the provided send function.</p> <p>Parameters:</p> Name Type Description Default <code>send_func</code> <code>Callable[[dict], Awaitable[None]]</code> <p>Callable to send the response.</p> required Source code in <code>macro\\response.py</code> <pre><code>async def send(self, send_func: Callable[[dict], Awaitable[None]]) -&gt; None:\n    \"\"\"\n    Send the response using the provided send function.\n\n    :param send_func: Callable to send the response.\n    \"\"\"\n    if self._sent:\n        raise RuntimeError(\"Response has already been sent\")\n\n    await send_func(\n        {\n            \"type\": \"http.response.start\",\n            \"status\": self.status,\n            \"headers\": self.prepare_headers(),\n        }\n    )\n\n    await send_func(\n        {\"type\": \"http.response.body\", \"body\": self.body, \"more_body\": False}\n    )\n\n    self._sent = True\n</code></pre>"},{"location":"api/response/#macro.response.HTMLResponse.set_content_type","title":"<code>set_content_type(content_type)</code>","text":"<p>Set the Content-Type header for the response.</p> <p>Parameters:</p> Name Type Description Default <code>content_type</code> <code>str</code> <p>Content-Type value.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>def set_content_type(self, content_type: str) -&gt; Response:\n    \"\"\"\n    Set the Content-Type header for the response.\n\n    :param content_type: Content-Type value.\n    :return: Response object.\n    \"\"\"\n    self.headers[\"Content-Type\"] = content_type\n    return self\n</code></pre>"},{"location":"api/response/#macro.response.HTMLResponse.set_cookie","title":"<code>set_cookie(name, value, max_age=None, expires=None, path='/', domain=None, secure=False, http_only=False, same_site=None)</code>","text":"<p>Set a cookie for the response.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Cookie name.</p> required <code>value</code> <code>str</code> <p>Cookie value.</p> required <code>max_age</code> <code>int</code> <p>Max-Age attribute.</p> <code>None</code> <code>expires</code> <code>str</code> <p>Expires attribute.</p> <code>None</code> <code>path</code> <code>str</code> <p>Path attribute.</p> <code>'/'</code> <code>domain</code> <code>str</code> <p>Domain attribute.</p> <code>None</code> <code>secure</code> <code>bool</code> <p>Secure attribute.</p> <code>False</code> <code>http_only</code> <code>bool</code> <p>HttpOnly attribute.</p> <code>False</code> <code>same_site</code> <code>str</code> <p>SameSite attribute.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>def set_cookie(\n    self,\n    name: str,\n    value: str,\n    max_age: int = None,\n    expires: str = None,\n    path: str = \"/\",\n    domain: str = None,\n    secure: bool = False,\n    http_only: bool = False,\n    same_site: str = None,\n) -&gt; Response:\n    \"\"\"\n    Set a cookie for the response.\n\n    :param name: Cookie name.\n    :param value: Cookie value.\n    :param max_age: Max-Age attribute.\n    :param expires: Expires attribute.\n    :param path: Path attribute.\n    :param domain: Domain attribute.\n    :param secure: Secure attribute.\n    :param http_only: HttpOnly attribute.\n    :param same_site: SameSite attribute.\n    :return: Response object.\n    \"\"\"\n    cookie_parts = [f\"{name}={value}\"]\n\n    if max_age is not None:\n        cookie_parts.append(f\"Max-Age={max_age}\")\n    if expires is not None:\n        cookie_parts.append(f\"Expires={expires}\")\n    if path:\n        cookie_parts.append(f\"Path={path}\")\n    if domain:\n        cookie_parts.append(f\"Domain={domain}\")\n    if secure:\n        cookie_parts.append(\"Secure\")\n    if http_only:\n        cookie_parts.append(\"HttpOnly\")\n    if same_site:\n        cookie_parts.append(f\"SameSite={same_site}\")\n\n    cookie_header = \"; \".join(cookie_parts)\n\n    if \"Set-Cookie\" in self.headers:\n        self.headers[\"Set-Cookie\"] = (\n            self.headers[\"Set-Cookie\"] + \"\\n\" + cookie_header\n        )\n    else:\n        self.headers[\"Set-Cookie\"] = cookie_header\n\n    return self\n</code></pre>"},{"location":"api/response/#macro.response.HTMLResponse.set_header","title":"<code>set_header(key, value)</code>","text":"<p>Set a header for the response.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Header name.</p> required <code>value</code> <code>str</code> <p>Header value.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>def set_header(self, key: str, value: str) -&gt; Response:\n    \"\"\"\n    Set a header for the response.\n\n    :param key: Header name.\n    :param value: Header value.\n    :return: Response object.\n    \"\"\"\n    self.headers[key] = value\n    return self\n</code></pre>"},{"location":"api/response/#macro.response.HTMLResponse.text","title":"<code>text(text, status=200)</code>  <code>classmethod</code>","text":"<p>Create a plain text response.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text content.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>200</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef text(cls, text: str, status: int = 200) -&gt; Response:\n    \"\"\"\n    Create a plain text response.\n\n    :param text: Text content.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"text/plain; charset=utf-8\"},\n        body=text.encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.JSONResponse","title":"<code>JSONResponse</code>","text":"<p>               Bases: <code>Response</code></p> <p>A class representing a JSON response.</p> <p>Inherits from Response.</p> <p>Attributes:     data (Any): Data to be serialized to JSON.     status (int): HTTP status code.</p> Source code in <code>macro\\response.py</code> <pre><code>class JSONResponse(Response):\n    \"\"\"\n    A class representing a JSON response.\n\n    Inherits from Response.\n\n    Attributes:\n        data (Any): Data to be serialized to JSON.\n        status (int): HTTP status code.\n    \"\"\"\n\n    def __init__(self, data: Any, status: int = 200):\n        super().__init__(\n            status=status,\n            headers={\"Content-Type\": \"application/json\"},\n            body=json.dumps(data).encode(\"utf-8\"),\n        )\n</code></pre>"},{"location":"api/response/#macro.response.JSONResponse.error","title":"<code>error(message='Internal Server Error', status=500)</code>  <code>classmethod</code>","text":"<p>Create an error response.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Error message.</p> <code>'Internal Server Error'</code> <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>500</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef error(\n    cls, message: str = \"Internal Server Error\", status: int = 500\n) -&gt; Response:\n    \"\"\"\n    Create an error response.\n\n    :param message: Error message.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"text/plain; charset=utf-8\"},\n        body=message.encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.JSONResponse.html","title":"<code>html(content, status=200)</code>  <code>classmethod</code>","text":"<p>Create an HTML response.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>HTML content as a string.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>200</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef html(cls, content: str, status: int = 200) -&gt; Response:\n    \"\"\"\n    Create an HTML response.\n\n    :param content: HTML content as a string.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"text/html; charset=utf-8\"},\n        body=content.encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.JSONResponse.json","title":"<code>json(data, status=200)</code>  <code>classmethod</code>","text":"<p>Create a JSON response.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>Data to be serialized to JSON.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>200</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef json(cls, data: Any, status: int = 200) -&gt; Response:\n    \"\"\"\n    Create a JSON response.\n\n    :param data: Data to be serialized to JSON.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"application/json\"},\n        body=json.dumps(data).encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.JSONResponse.prepare_headers","title":"<code>prepare_headers()</code>","text":"<p>Prepare headers for the response.</p> <p>Returns:</p> Type Description <code>list[tuple[bytes, bytes]]</code> <p>List of headers as tuples of bytes.</p> Source code in <code>macro\\response.py</code> <pre><code>def prepare_headers(self) -&gt; list[tuple[bytes, bytes]]:\n    \"\"\"\n    Prepare headers for the response.\n\n    :return: List of headers as tuples of bytes.\n    \"\"\"\n    final_headers = dict(self.headers)\n\n    if \"Content-Length\" not in final_headers:\n        final_headers[\"Content-Length\"] = str(len(self.body))\n\n    return [\n        (key.lower().encode(\"latin1\"), value.encode(\"latin1\"))\n        for key, value in final_headers.items()\n    ]\n</code></pre>"},{"location":"api/response/#macro.response.JSONResponse.redirect","title":"<code>redirect(location, status=302)</code>  <code>classmethod</code>","text":"<p>Create a redirect response.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>str</code> <p>URL to redirect to.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>302</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef redirect(cls, location: str, status: int = 302) -&gt; Response:\n    \"\"\"\n    Create a redirect response.\n\n    :param location: URL to redirect to.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Location\": location},\n        body=f\"Redirecting to {location}\".encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.JSONResponse.send","title":"<code>send(send_func)</code>  <code>async</code>","text":"<p>Send the response using the provided send function.</p> <p>Parameters:</p> Name Type Description Default <code>send_func</code> <code>Callable[[dict], Awaitable[None]]</code> <p>Callable to send the response.</p> required Source code in <code>macro\\response.py</code> <pre><code>async def send(self, send_func: Callable[[dict], Awaitable[None]]) -&gt; None:\n    \"\"\"\n    Send the response using the provided send function.\n\n    :param send_func: Callable to send the response.\n    \"\"\"\n    if self._sent:\n        raise RuntimeError(\"Response has already been sent\")\n\n    await send_func(\n        {\n            \"type\": \"http.response.start\",\n            \"status\": self.status,\n            \"headers\": self.prepare_headers(),\n        }\n    )\n\n    await send_func(\n        {\"type\": \"http.response.body\", \"body\": self.body, \"more_body\": False}\n    )\n\n    self._sent = True\n</code></pre>"},{"location":"api/response/#macro.response.JSONResponse.set_content_type","title":"<code>set_content_type(content_type)</code>","text":"<p>Set the Content-Type header for the response.</p> <p>Parameters:</p> Name Type Description Default <code>content_type</code> <code>str</code> <p>Content-Type value.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>def set_content_type(self, content_type: str) -&gt; Response:\n    \"\"\"\n    Set the Content-Type header for the response.\n\n    :param content_type: Content-Type value.\n    :return: Response object.\n    \"\"\"\n    self.headers[\"Content-Type\"] = content_type\n    return self\n</code></pre>"},{"location":"api/response/#macro.response.JSONResponse.set_cookie","title":"<code>set_cookie(name, value, max_age=None, expires=None, path='/', domain=None, secure=False, http_only=False, same_site=None)</code>","text":"<p>Set a cookie for the response.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Cookie name.</p> required <code>value</code> <code>str</code> <p>Cookie value.</p> required <code>max_age</code> <code>int</code> <p>Max-Age attribute.</p> <code>None</code> <code>expires</code> <code>str</code> <p>Expires attribute.</p> <code>None</code> <code>path</code> <code>str</code> <p>Path attribute.</p> <code>'/'</code> <code>domain</code> <code>str</code> <p>Domain attribute.</p> <code>None</code> <code>secure</code> <code>bool</code> <p>Secure attribute.</p> <code>False</code> <code>http_only</code> <code>bool</code> <p>HttpOnly attribute.</p> <code>False</code> <code>same_site</code> <code>str</code> <p>SameSite attribute.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>def set_cookie(\n    self,\n    name: str,\n    value: str,\n    max_age: int = None,\n    expires: str = None,\n    path: str = \"/\",\n    domain: str = None,\n    secure: bool = False,\n    http_only: bool = False,\n    same_site: str = None,\n) -&gt; Response:\n    \"\"\"\n    Set a cookie for the response.\n\n    :param name: Cookie name.\n    :param value: Cookie value.\n    :param max_age: Max-Age attribute.\n    :param expires: Expires attribute.\n    :param path: Path attribute.\n    :param domain: Domain attribute.\n    :param secure: Secure attribute.\n    :param http_only: HttpOnly attribute.\n    :param same_site: SameSite attribute.\n    :return: Response object.\n    \"\"\"\n    cookie_parts = [f\"{name}={value}\"]\n\n    if max_age is not None:\n        cookie_parts.append(f\"Max-Age={max_age}\")\n    if expires is not None:\n        cookie_parts.append(f\"Expires={expires}\")\n    if path:\n        cookie_parts.append(f\"Path={path}\")\n    if domain:\n        cookie_parts.append(f\"Domain={domain}\")\n    if secure:\n        cookie_parts.append(\"Secure\")\n    if http_only:\n        cookie_parts.append(\"HttpOnly\")\n    if same_site:\n        cookie_parts.append(f\"SameSite={same_site}\")\n\n    cookie_header = \"; \".join(cookie_parts)\n\n    if \"Set-Cookie\" in self.headers:\n        self.headers[\"Set-Cookie\"] = (\n            self.headers[\"Set-Cookie\"] + \"\\n\" + cookie_header\n        )\n    else:\n        self.headers[\"Set-Cookie\"] = cookie_header\n\n    return self\n</code></pre>"},{"location":"api/response/#macro.response.JSONResponse.set_header","title":"<code>set_header(key, value)</code>","text":"<p>Set a header for the response.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Header name.</p> required <code>value</code> <code>str</code> <p>Header value.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>def set_header(self, key: str, value: str) -&gt; Response:\n    \"\"\"\n    Set a header for the response.\n\n    :param key: Header name.\n    :param value: Header value.\n    :return: Response object.\n    \"\"\"\n    self.headers[key] = value\n    return self\n</code></pre>"},{"location":"api/response/#macro.response.JSONResponse.text","title":"<code>text(text, status=200)</code>  <code>classmethod</code>","text":"<p>Create a plain text response.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text content.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>200</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef text(cls, text: str, status: int = 200) -&gt; Response:\n    \"\"\"\n    Create a plain text response.\n\n    :param text: Text content.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"text/plain; charset=utf-8\"},\n        body=text.encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.PlainTextResponse","title":"<code>PlainTextResponse</code>","text":"<p>               Bases: <code>Response</code></p> <p>A class representing a plain text response.</p> <p>Inherits from Response.</p> <p>Attributes:     text (str): Text content.     status (int): HTTP status code.</p> Source code in <code>macro\\response.py</code> <pre><code>class PlainTextResponse(Response):\n    \"\"\"\n    A class representing a plain text response.\n\n    Inherits from Response.\n\n    Attributes:\n        text (str): Text content.\n        status (int): HTTP status code.\n    \"\"\"\n\n    def __init__(self, text: str, status: int = 200):\n        super().__init__(\n            status=status,\n            headers={\"Content-Type\": \"text/plain; charset=utf-8\"},\n            body=text.encode(\"utf-8\"),\n        )\n</code></pre>"},{"location":"api/response/#macro.response.PlainTextResponse.error","title":"<code>error(message='Internal Server Error', status=500)</code>  <code>classmethod</code>","text":"<p>Create an error response.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Error message.</p> <code>'Internal Server Error'</code> <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>500</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef error(\n    cls, message: str = \"Internal Server Error\", status: int = 500\n) -&gt; Response:\n    \"\"\"\n    Create an error response.\n\n    :param message: Error message.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"text/plain; charset=utf-8\"},\n        body=message.encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.PlainTextResponse.html","title":"<code>html(content, status=200)</code>  <code>classmethod</code>","text":"<p>Create an HTML response.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>HTML content as a string.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>200</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef html(cls, content: str, status: int = 200) -&gt; Response:\n    \"\"\"\n    Create an HTML response.\n\n    :param content: HTML content as a string.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"text/html; charset=utf-8\"},\n        body=content.encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.PlainTextResponse.json","title":"<code>json(data, status=200)</code>  <code>classmethod</code>","text":"<p>Create a JSON response.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>Data to be serialized to JSON.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>200</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef json(cls, data: Any, status: int = 200) -&gt; Response:\n    \"\"\"\n    Create a JSON response.\n\n    :param data: Data to be serialized to JSON.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"application/json\"},\n        body=json.dumps(data).encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.PlainTextResponse.prepare_headers","title":"<code>prepare_headers()</code>","text":"<p>Prepare headers for the response.</p> <p>Returns:</p> Type Description <code>list[tuple[bytes, bytes]]</code> <p>List of headers as tuples of bytes.</p> Source code in <code>macro\\response.py</code> <pre><code>def prepare_headers(self) -&gt; list[tuple[bytes, bytes]]:\n    \"\"\"\n    Prepare headers for the response.\n\n    :return: List of headers as tuples of bytes.\n    \"\"\"\n    final_headers = dict(self.headers)\n\n    if \"Content-Length\" not in final_headers:\n        final_headers[\"Content-Length\"] = str(len(self.body))\n\n    return [\n        (key.lower().encode(\"latin1\"), value.encode(\"latin1\"))\n        for key, value in final_headers.items()\n    ]\n</code></pre>"},{"location":"api/response/#macro.response.PlainTextResponse.redirect","title":"<code>redirect(location, status=302)</code>  <code>classmethod</code>","text":"<p>Create a redirect response.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>str</code> <p>URL to redirect to.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>302</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef redirect(cls, location: str, status: int = 302) -&gt; Response:\n    \"\"\"\n    Create a redirect response.\n\n    :param location: URL to redirect to.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Location\": location},\n        body=f\"Redirecting to {location}\".encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.PlainTextResponse.send","title":"<code>send(send_func)</code>  <code>async</code>","text":"<p>Send the response using the provided send function.</p> <p>Parameters:</p> Name Type Description Default <code>send_func</code> <code>Callable[[dict], Awaitable[None]]</code> <p>Callable to send the response.</p> required Source code in <code>macro\\response.py</code> <pre><code>async def send(self, send_func: Callable[[dict], Awaitable[None]]) -&gt; None:\n    \"\"\"\n    Send the response using the provided send function.\n\n    :param send_func: Callable to send the response.\n    \"\"\"\n    if self._sent:\n        raise RuntimeError(\"Response has already been sent\")\n\n    await send_func(\n        {\n            \"type\": \"http.response.start\",\n            \"status\": self.status,\n            \"headers\": self.prepare_headers(),\n        }\n    )\n\n    await send_func(\n        {\"type\": \"http.response.body\", \"body\": self.body, \"more_body\": False}\n    )\n\n    self._sent = True\n</code></pre>"},{"location":"api/response/#macro.response.PlainTextResponse.set_content_type","title":"<code>set_content_type(content_type)</code>","text":"<p>Set the Content-Type header for the response.</p> <p>Parameters:</p> Name Type Description Default <code>content_type</code> <code>str</code> <p>Content-Type value.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>def set_content_type(self, content_type: str) -&gt; Response:\n    \"\"\"\n    Set the Content-Type header for the response.\n\n    :param content_type: Content-Type value.\n    :return: Response object.\n    \"\"\"\n    self.headers[\"Content-Type\"] = content_type\n    return self\n</code></pre>"},{"location":"api/response/#macro.response.PlainTextResponse.set_cookie","title":"<code>set_cookie(name, value, max_age=None, expires=None, path='/', domain=None, secure=False, http_only=False, same_site=None)</code>","text":"<p>Set a cookie for the response.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Cookie name.</p> required <code>value</code> <code>str</code> <p>Cookie value.</p> required <code>max_age</code> <code>int</code> <p>Max-Age attribute.</p> <code>None</code> <code>expires</code> <code>str</code> <p>Expires attribute.</p> <code>None</code> <code>path</code> <code>str</code> <p>Path attribute.</p> <code>'/'</code> <code>domain</code> <code>str</code> <p>Domain attribute.</p> <code>None</code> <code>secure</code> <code>bool</code> <p>Secure attribute.</p> <code>False</code> <code>http_only</code> <code>bool</code> <p>HttpOnly attribute.</p> <code>False</code> <code>same_site</code> <code>str</code> <p>SameSite attribute.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>def set_cookie(\n    self,\n    name: str,\n    value: str,\n    max_age: int = None,\n    expires: str = None,\n    path: str = \"/\",\n    domain: str = None,\n    secure: bool = False,\n    http_only: bool = False,\n    same_site: str = None,\n) -&gt; Response:\n    \"\"\"\n    Set a cookie for the response.\n\n    :param name: Cookie name.\n    :param value: Cookie value.\n    :param max_age: Max-Age attribute.\n    :param expires: Expires attribute.\n    :param path: Path attribute.\n    :param domain: Domain attribute.\n    :param secure: Secure attribute.\n    :param http_only: HttpOnly attribute.\n    :param same_site: SameSite attribute.\n    :return: Response object.\n    \"\"\"\n    cookie_parts = [f\"{name}={value}\"]\n\n    if max_age is not None:\n        cookie_parts.append(f\"Max-Age={max_age}\")\n    if expires is not None:\n        cookie_parts.append(f\"Expires={expires}\")\n    if path:\n        cookie_parts.append(f\"Path={path}\")\n    if domain:\n        cookie_parts.append(f\"Domain={domain}\")\n    if secure:\n        cookie_parts.append(\"Secure\")\n    if http_only:\n        cookie_parts.append(\"HttpOnly\")\n    if same_site:\n        cookie_parts.append(f\"SameSite={same_site}\")\n\n    cookie_header = \"; \".join(cookie_parts)\n\n    if \"Set-Cookie\" in self.headers:\n        self.headers[\"Set-Cookie\"] = (\n            self.headers[\"Set-Cookie\"] + \"\\n\" + cookie_header\n        )\n    else:\n        self.headers[\"Set-Cookie\"] = cookie_header\n\n    return self\n</code></pre>"},{"location":"api/response/#macro.response.PlainTextResponse.set_header","title":"<code>set_header(key, value)</code>","text":"<p>Set a header for the response.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Header name.</p> required <code>value</code> <code>str</code> <p>Header value.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>def set_header(self, key: str, value: str) -&gt; Response:\n    \"\"\"\n    Set a header for the response.\n\n    :param key: Header name.\n    :param value: Header value.\n    :return: Response object.\n    \"\"\"\n    self.headers[key] = value\n    return self\n</code></pre>"},{"location":"api/response/#macro.response.PlainTextResponse.text","title":"<code>text(text, status=200)</code>  <code>classmethod</code>","text":"<p>Create a plain text response.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text content.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>200</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef text(cls, text: str, status: int = 200) -&gt; Response:\n    \"\"\"\n    Create a plain text response.\n\n    :param text: Text content.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"text/plain; charset=utf-8\"},\n        body=text.encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.RedirectResponse","title":"<code>RedirectResponse</code>","text":"<p>               Bases: <code>Response</code></p> <p>A class representing a redirect response.</p> <p>Inherits from Response.</p> <p>Attributes:     location (str): URL to redirect to.     status (int): HTTP status code.</p> Source code in <code>macro\\response.py</code> <pre><code>class RedirectResponse(Response):\n    \"\"\"\n    A class representing a redirect response.\n\n    Inherits from Response.\n\n    Attributes:\n        location (str): URL to redirect to.\n        status (int): HTTP status code.\n    \"\"\"\n\n    def __init__(self, location: str, status: int = 302):\n        super().__init__(\n            status=status,\n            headers={\"Location\": location},\n            body=f\"Redirecting to {location}\".encode(\"utf-8\"),\n        )\n</code></pre>"},{"location":"api/response/#macro.response.RedirectResponse.error","title":"<code>error(message='Internal Server Error', status=500)</code>  <code>classmethod</code>","text":"<p>Create an error response.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Error message.</p> <code>'Internal Server Error'</code> <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>500</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef error(\n    cls, message: str = \"Internal Server Error\", status: int = 500\n) -&gt; Response:\n    \"\"\"\n    Create an error response.\n\n    :param message: Error message.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"text/plain; charset=utf-8\"},\n        body=message.encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.RedirectResponse.html","title":"<code>html(content, status=200)</code>  <code>classmethod</code>","text":"<p>Create an HTML response.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>HTML content as a string.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>200</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef html(cls, content: str, status: int = 200) -&gt; Response:\n    \"\"\"\n    Create an HTML response.\n\n    :param content: HTML content as a string.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"text/html; charset=utf-8\"},\n        body=content.encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.RedirectResponse.json","title":"<code>json(data, status=200)</code>  <code>classmethod</code>","text":"<p>Create a JSON response.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>Data to be serialized to JSON.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>200</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef json(cls, data: Any, status: int = 200) -&gt; Response:\n    \"\"\"\n    Create a JSON response.\n\n    :param data: Data to be serialized to JSON.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"application/json\"},\n        body=json.dumps(data).encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.RedirectResponse.prepare_headers","title":"<code>prepare_headers()</code>","text":"<p>Prepare headers for the response.</p> <p>Returns:</p> Type Description <code>list[tuple[bytes, bytes]]</code> <p>List of headers as tuples of bytes.</p> Source code in <code>macro\\response.py</code> <pre><code>def prepare_headers(self) -&gt; list[tuple[bytes, bytes]]:\n    \"\"\"\n    Prepare headers for the response.\n\n    :return: List of headers as tuples of bytes.\n    \"\"\"\n    final_headers = dict(self.headers)\n\n    if \"Content-Length\" not in final_headers:\n        final_headers[\"Content-Length\"] = str(len(self.body))\n\n    return [\n        (key.lower().encode(\"latin1\"), value.encode(\"latin1\"))\n        for key, value in final_headers.items()\n    ]\n</code></pre>"},{"location":"api/response/#macro.response.RedirectResponse.redirect","title":"<code>redirect(location, status=302)</code>  <code>classmethod</code>","text":"<p>Create a redirect response.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>str</code> <p>URL to redirect to.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>302</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef redirect(cls, location: str, status: int = 302) -&gt; Response:\n    \"\"\"\n    Create a redirect response.\n\n    :param location: URL to redirect to.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Location\": location},\n        body=f\"Redirecting to {location}\".encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.RedirectResponse.send","title":"<code>send(send_func)</code>  <code>async</code>","text":"<p>Send the response using the provided send function.</p> <p>Parameters:</p> Name Type Description Default <code>send_func</code> <code>Callable[[dict], Awaitable[None]]</code> <p>Callable to send the response.</p> required Source code in <code>macro\\response.py</code> <pre><code>async def send(self, send_func: Callable[[dict], Awaitable[None]]) -&gt; None:\n    \"\"\"\n    Send the response using the provided send function.\n\n    :param send_func: Callable to send the response.\n    \"\"\"\n    if self._sent:\n        raise RuntimeError(\"Response has already been sent\")\n\n    await send_func(\n        {\n            \"type\": \"http.response.start\",\n            \"status\": self.status,\n            \"headers\": self.prepare_headers(),\n        }\n    )\n\n    await send_func(\n        {\"type\": \"http.response.body\", \"body\": self.body, \"more_body\": False}\n    )\n\n    self._sent = True\n</code></pre>"},{"location":"api/response/#macro.response.RedirectResponse.set_content_type","title":"<code>set_content_type(content_type)</code>","text":"<p>Set the Content-Type header for the response.</p> <p>Parameters:</p> Name Type Description Default <code>content_type</code> <code>str</code> <p>Content-Type value.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>def set_content_type(self, content_type: str) -&gt; Response:\n    \"\"\"\n    Set the Content-Type header for the response.\n\n    :param content_type: Content-Type value.\n    :return: Response object.\n    \"\"\"\n    self.headers[\"Content-Type\"] = content_type\n    return self\n</code></pre>"},{"location":"api/response/#macro.response.RedirectResponse.set_cookie","title":"<code>set_cookie(name, value, max_age=None, expires=None, path='/', domain=None, secure=False, http_only=False, same_site=None)</code>","text":"<p>Set a cookie for the response.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Cookie name.</p> required <code>value</code> <code>str</code> <p>Cookie value.</p> required <code>max_age</code> <code>int</code> <p>Max-Age attribute.</p> <code>None</code> <code>expires</code> <code>str</code> <p>Expires attribute.</p> <code>None</code> <code>path</code> <code>str</code> <p>Path attribute.</p> <code>'/'</code> <code>domain</code> <code>str</code> <p>Domain attribute.</p> <code>None</code> <code>secure</code> <code>bool</code> <p>Secure attribute.</p> <code>False</code> <code>http_only</code> <code>bool</code> <p>HttpOnly attribute.</p> <code>False</code> <code>same_site</code> <code>str</code> <p>SameSite attribute.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>def set_cookie(\n    self,\n    name: str,\n    value: str,\n    max_age: int = None,\n    expires: str = None,\n    path: str = \"/\",\n    domain: str = None,\n    secure: bool = False,\n    http_only: bool = False,\n    same_site: str = None,\n) -&gt; Response:\n    \"\"\"\n    Set a cookie for the response.\n\n    :param name: Cookie name.\n    :param value: Cookie value.\n    :param max_age: Max-Age attribute.\n    :param expires: Expires attribute.\n    :param path: Path attribute.\n    :param domain: Domain attribute.\n    :param secure: Secure attribute.\n    :param http_only: HttpOnly attribute.\n    :param same_site: SameSite attribute.\n    :return: Response object.\n    \"\"\"\n    cookie_parts = [f\"{name}={value}\"]\n\n    if max_age is not None:\n        cookie_parts.append(f\"Max-Age={max_age}\")\n    if expires is not None:\n        cookie_parts.append(f\"Expires={expires}\")\n    if path:\n        cookie_parts.append(f\"Path={path}\")\n    if domain:\n        cookie_parts.append(f\"Domain={domain}\")\n    if secure:\n        cookie_parts.append(\"Secure\")\n    if http_only:\n        cookie_parts.append(\"HttpOnly\")\n    if same_site:\n        cookie_parts.append(f\"SameSite={same_site}\")\n\n    cookie_header = \"; \".join(cookie_parts)\n\n    if \"Set-Cookie\" in self.headers:\n        self.headers[\"Set-Cookie\"] = (\n            self.headers[\"Set-Cookie\"] + \"\\n\" + cookie_header\n        )\n    else:\n        self.headers[\"Set-Cookie\"] = cookie_header\n\n    return self\n</code></pre>"},{"location":"api/response/#macro.response.RedirectResponse.set_header","title":"<code>set_header(key, value)</code>","text":"<p>Set a header for the response.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Header name.</p> required <code>value</code> <code>str</code> <p>Header value.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>def set_header(self, key: str, value: str) -&gt; Response:\n    \"\"\"\n    Set a header for the response.\n\n    :param key: Header name.\n    :param value: Header value.\n    :return: Response object.\n    \"\"\"\n    self.headers[key] = value\n    return self\n</code></pre>"},{"location":"api/response/#macro.response.RedirectResponse.text","title":"<code>text(text, status=200)</code>  <code>classmethod</code>","text":"<p>Create a plain text response.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text content.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>200</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef text(cls, text: str, status: int = 200) -&gt; Response:\n    \"\"\"\n    Create a plain text response.\n\n    :param text: Text content.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"text/plain; charset=utf-8\"},\n        body=text.encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.Response","title":"<code>Response</code>","text":"<p>A class representing an HTTP response.</p> <p>Attributes:     status (int): HTTP status code.     headers (dict[str, str]): HTTP headers.     body (bytes): Response body.     _sent (bool): Flag indicating if the response has been sent.</p> Source code in <code>macro\\response.py</code> <pre><code>@attrs.define\nclass Response:\n    \"\"\"\n    A class representing an HTTP response.\n\n    Attributes:\n        status (int): HTTP status code.\n        headers (dict[str, str]): HTTP headers.\n        body (bytes): Response body.\n        _sent (bool): Flag indicating if the response has been sent.\n    \"\"\"\n\n    status: int = attrs.field(default=200)\n    headers: dict[str, str] = attrs.field(factory=dict)\n    body: bytes = attrs.field(default=b\"\")\n    _sent: bool = attrs.field(default=False, init=False)\n\n    @classmethod\n    def html(cls, content: str, status: int = 200) -&gt; Response:\n        \"\"\"\n        Create an HTML response.\n\n        :param content: HTML content as a string.\n        :param status: HTTP status code.\n        :return: Response object.\n        \"\"\"\n        response = cls(\n            status=status,\n            headers={\"Content-Type\": \"text/html; charset=utf-8\"},\n            body=content.encode(\"utf-8\"),\n        )\n        return response\n\n    @classmethod\n    def json(cls, data: Any, status: int = 200) -&gt; Response:\n        \"\"\"\n        Create a JSON response.\n\n        :param data: Data to be serialized to JSON.\n        :param status: HTTP status code.\n        :return: Response object.\n        \"\"\"\n        response = cls(\n            status=status,\n            headers={\"Content-Type\": \"application/json\"},\n            body=json.dumps(data).encode(\"utf-8\"),\n        )\n        return response\n\n    @classmethod\n    def text(cls, text: str, status: int = 200) -&gt; Response:\n        \"\"\"\n        Create a plain text response.\n\n        :param text: Text content.\n        :param status: HTTP status code.\n        :return: Response object.\n        \"\"\"\n        response = cls(\n            status=status,\n            headers={\"Content-Type\": \"text/plain; charset=utf-8\"},\n            body=text.encode(\"utf-8\"),\n        )\n        return response\n\n    @classmethod\n    def redirect(cls, location: str, status: int = 302) -&gt; Response:\n        \"\"\"\n        Create a redirect response.\n\n        :param location: URL to redirect to.\n        :param status: HTTP status code.\n        :return: Response object.\n        \"\"\"\n        response = cls(\n            status=status,\n            headers={\"Location\": location},\n            body=f\"Redirecting to {location}\".encode(\"utf-8\"),\n        )\n        return response\n\n    @classmethod\n    def error(\n        cls, message: str = \"Internal Server Error\", status: int = 500\n    ) -&gt; Response:\n        \"\"\"\n        Create an error response.\n\n        :param message: Error message.\n        :param status: HTTP status code.\n        :return: Response object.\n        \"\"\"\n        response = cls(\n            status=status,\n            headers={\"Content-Type\": \"text/plain; charset=utf-8\"},\n            body=message.encode(\"utf-8\"),\n        )\n        return response\n\n    def set_header(self, key: str, value: str) -&gt; Response:\n        \"\"\"\n        Set a header for the response.\n\n        :param key: Header name.\n        :param value: Header value.\n        :return: Response object.\n        \"\"\"\n        self.headers[key] = value\n        return self\n\n    def set_content_type(self, content_type: str) -&gt; Response:\n        \"\"\"\n        Set the Content-Type header for the response.\n\n        :param content_type: Content-Type value.\n        :return: Response object.\n        \"\"\"\n        self.headers[\"Content-Type\"] = content_type\n        return self\n\n    def set_cookie(\n        self,\n        name: str,\n        value: str,\n        max_age: int = None,\n        expires: str = None,\n        path: str = \"/\",\n        domain: str = None,\n        secure: bool = False,\n        http_only: bool = False,\n        same_site: str = None,\n    ) -&gt; Response:\n        \"\"\"\n        Set a cookie for the response.\n\n        :param name: Cookie name.\n        :param value: Cookie value.\n        :param max_age: Max-Age attribute.\n        :param expires: Expires attribute.\n        :param path: Path attribute.\n        :param domain: Domain attribute.\n        :param secure: Secure attribute.\n        :param http_only: HttpOnly attribute.\n        :param same_site: SameSite attribute.\n        :return: Response object.\n        \"\"\"\n        cookie_parts = [f\"{name}={value}\"]\n\n        if max_age is not None:\n            cookie_parts.append(f\"Max-Age={max_age}\")\n        if expires is not None:\n            cookie_parts.append(f\"Expires={expires}\")\n        if path:\n            cookie_parts.append(f\"Path={path}\")\n        if domain:\n            cookie_parts.append(f\"Domain={domain}\")\n        if secure:\n            cookie_parts.append(\"Secure\")\n        if http_only:\n            cookie_parts.append(\"HttpOnly\")\n        if same_site:\n            cookie_parts.append(f\"SameSite={same_site}\")\n\n        cookie_header = \"; \".join(cookie_parts)\n\n        if \"Set-Cookie\" in self.headers:\n            self.headers[\"Set-Cookie\"] = (\n                self.headers[\"Set-Cookie\"] + \"\\n\" + cookie_header\n            )\n        else:\n            self.headers[\"Set-Cookie\"] = cookie_header\n\n        return self\n\n    def prepare_headers(self) -&gt; list[tuple[bytes, bytes]]:\n        \"\"\"\n        Prepare headers for the response.\n\n        :return: List of headers as tuples of bytes.\n        \"\"\"\n        final_headers = dict(self.headers)\n\n        if \"Content-Length\" not in final_headers:\n            final_headers[\"Content-Length\"] = str(len(self.body))\n\n        return [\n            (key.lower().encode(\"latin1\"), value.encode(\"latin1\"))\n            for key, value in final_headers.items()\n        ]\n\n    async def send(self, send_func: Callable[[dict], Awaitable[None]]) -&gt; None:\n        \"\"\"\n        Send the response using the provided send function.\n\n        :param send_func: Callable to send the response.\n        \"\"\"\n        if self._sent:\n            raise RuntimeError(\"Response has already been sent\")\n\n        await send_func(\n            {\n                \"type\": \"http.response.start\",\n                \"status\": self.status,\n                \"headers\": self.prepare_headers(),\n            }\n        )\n\n        await send_func(\n            {\"type\": \"http.response.body\", \"body\": self.body, \"more_body\": False}\n        )\n\n        self._sent = True\n\n    def __str__(self) -&gt; str:\n        status_line = f\"HTTP/1.1 {self.status} {self._status_phrase()}\"\n        headers = \"\\n\".join([f\"{key}: {value}\" for key, value in self.headers.items()])\n        body_preview = self.body[:100].decode(\"utf-8\", errors=\"replace\")\n        if len(self.body) &gt; 100:\n            body_preview += \"...\"\n\n        return f\"{status_line}\\n{headers}\\n\\n{body_preview}\"\n\n    def _status_phrase(self) -&gt; str:\n        phrases = {\n            200: \"OK\",\n            201: \"Created\",\n            204: \"No Content\",\n            301: \"Moved Permanently\",\n            302: \"Found\",\n            304: \"Not Modified\",\n            400: \"Bad Request\",\n            401: \"Unauthorized\",\n            403: \"Forbidden\",\n            404: \"Not Found\",\n            405: \"Method Not Allowed\",\n            500: \"Internal Server Error\",\n            502: \"Bad Gateway\",\n            503: \"Service Unavailable\",\n        }\n        return phrases.get(self.status, \"Unknown\")\n</code></pre>"},{"location":"api/response/#macro.response.Response.error","title":"<code>error(message='Internal Server Error', status=500)</code>  <code>classmethod</code>","text":"<p>Create an error response.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Error message.</p> <code>'Internal Server Error'</code> <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>500</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef error(\n    cls, message: str = \"Internal Server Error\", status: int = 500\n) -&gt; Response:\n    \"\"\"\n    Create an error response.\n\n    :param message: Error message.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"text/plain; charset=utf-8\"},\n        body=message.encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.Response.html","title":"<code>html(content, status=200)</code>  <code>classmethod</code>","text":"<p>Create an HTML response.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>HTML content as a string.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>200</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef html(cls, content: str, status: int = 200) -&gt; Response:\n    \"\"\"\n    Create an HTML response.\n\n    :param content: HTML content as a string.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"text/html; charset=utf-8\"},\n        body=content.encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.Response.json","title":"<code>json(data, status=200)</code>  <code>classmethod</code>","text":"<p>Create a JSON response.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>Data to be serialized to JSON.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>200</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef json(cls, data: Any, status: int = 200) -&gt; Response:\n    \"\"\"\n    Create a JSON response.\n\n    :param data: Data to be serialized to JSON.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"application/json\"},\n        body=json.dumps(data).encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.Response.prepare_headers","title":"<code>prepare_headers()</code>","text":"<p>Prepare headers for the response.</p> <p>Returns:</p> Type Description <code>list[tuple[bytes, bytes]]</code> <p>List of headers as tuples of bytes.</p> Source code in <code>macro\\response.py</code> <pre><code>def prepare_headers(self) -&gt; list[tuple[bytes, bytes]]:\n    \"\"\"\n    Prepare headers for the response.\n\n    :return: List of headers as tuples of bytes.\n    \"\"\"\n    final_headers = dict(self.headers)\n\n    if \"Content-Length\" not in final_headers:\n        final_headers[\"Content-Length\"] = str(len(self.body))\n\n    return [\n        (key.lower().encode(\"latin1\"), value.encode(\"latin1\"))\n        for key, value in final_headers.items()\n    ]\n</code></pre>"},{"location":"api/response/#macro.response.Response.redirect","title":"<code>redirect(location, status=302)</code>  <code>classmethod</code>","text":"<p>Create a redirect response.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>str</code> <p>URL to redirect to.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>302</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef redirect(cls, location: str, status: int = 302) -&gt; Response:\n    \"\"\"\n    Create a redirect response.\n\n    :param location: URL to redirect to.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Location\": location},\n        body=f\"Redirecting to {location}\".encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.Response.send","title":"<code>send(send_func)</code>  <code>async</code>","text":"<p>Send the response using the provided send function.</p> <p>Parameters:</p> Name Type Description Default <code>send_func</code> <code>Callable[[dict], Awaitable[None]]</code> <p>Callable to send the response.</p> required Source code in <code>macro\\response.py</code> <pre><code>async def send(self, send_func: Callable[[dict], Awaitable[None]]) -&gt; None:\n    \"\"\"\n    Send the response using the provided send function.\n\n    :param send_func: Callable to send the response.\n    \"\"\"\n    if self._sent:\n        raise RuntimeError(\"Response has already been sent\")\n\n    await send_func(\n        {\n            \"type\": \"http.response.start\",\n            \"status\": self.status,\n            \"headers\": self.prepare_headers(),\n        }\n    )\n\n    await send_func(\n        {\"type\": \"http.response.body\", \"body\": self.body, \"more_body\": False}\n    )\n\n    self._sent = True\n</code></pre>"},{"location":"api/response/#macro.response.Response.set_content_type","title":"<code>set_content_type(content_type)</code>","text":"<p>Set the Content-Type header for the response.</p> <p>Parameters:</p> Name Type Description Default <code>content_type</code> <code>str</code> <p>Content-Type value.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>def set_content_type(self, content_type: str) -&gt; Response:\n    \"\"\"\n    Set the Content-Type header for the response.\n\n    :param content_type: Content-Type value.\n    :return: Response object.\n    \"\"\"\n    self.headers[\"Content-Type\"] = content_type\n    return self\n</code></pre>"},{"location":"api/response/#macro.response.Response.set_cookie","title":"<code>set_cookie(name, value, max_age=None, expires=None, path='/', domain=None, secure=False, http_only=False, same_site=None)</code>","text":"<p>Set a cookie for the response.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Cookie name.</p> required <code>value</code> <code>str</code> <p>Cookie value.</p> required <code>max_age</code> <code>int</code> <p>Max-Age attribute.</p> <code>None</code> <code>expires</code> <code>str</code> <p>Expires attribute.</p> <code>None</code> <code>path</code> <code>str</code> <p>Path attribute.</p> <code>'/'</code> <code>domain</code> <code>str</code> <p>Domain attribute.</p> <code>None</code> <code>secure</code> <code>bool</code> <p>Secure attribute.</p> <code>False</code> <code>http_only</code> <code>bool</code> <p>HttpOnly attribute.</p> <code>False</code> <code>same_site</code> <code>str</code> <p>SameSite attribute.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>def set_cookie(\n    self,\n    name: str,\n    value: str,\n    max_age: int = None,\n    expires: str = None,\n    path: str = \"/\",\n    domain: str = None,\n    secure: bool = False,\n    http_only: bool = False,\n    same_site: str = None,\n) -&gt; Response:\n    \"\"\"\n    Set a cookie for the response.\n\n    :param name: Cookie name.\n    :param value: Cookie value.\n    :param max_age: Max-Age attribute.\n    :param expires: Expires attribute.\n    :param path: Path attribute.\n    :param domain: Domain attribute.\n    :param secure: Secure attribute.\n    :param http_only: HttpOnly attribute.\n    :param same_site: SameSite attribute.\n    :return: Response object.\n    \"\"\"\n    cookie_parts = [f\"{name}={value}\"]\n\n    if max_age is not None:\n        cookie_parts.append(f\"Max-Age={max_age}\")\n    if expires is not None:\n        cookie_parts.append(f\"Expires={expires}\")\n    if path:\n        cookie_parts.append(f\"Path={path}\")\n    if domain:\n        cookie_parts.append(f\"Domain={domain}\")\n    if secure:\n        cookie_parts.append(\"Secure\")\n    if http_only:\n        cookie_parts.append(\"HttpOnly\")\n    if same_site:\n        cookie_parts.append(f\"SameSite={same_site}\")\n\n    cookie_header = \"; \".join(cookie_parts)\n\n    if \"Set-Cookie\" in self.headers:\n        self.headers[\"Set-Cookie\"] = (\n            self.headers[\"Set-Cookie\"] + \"\\n\" + cookie_header\n        )\n    else:\n        self.headers[\"Set-Cookie\"] = cookie_header\n\n    return self\n</code></pre>"},{"location":"api/response/#macro.response.Response.set_header","title":"<code>set_header(key, value)</code>","text":"<p>Set a header for the response.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Header name.</p> required <code>value</code> <code>str</code> <p>Header value.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>def set_header(self, key: str, value: str) -&gt; Response:\n    \"\"\"\n    Set a header for the response.\n\n    :param key: Header name.\n    :param value: Header value.\n    :return: Response object.\n    \"\"\"\n    self.headers[key] = value\n    return self\n</code></pre>"},{"location":"api/response/#macro.response.Response.text","title":"<code>text(text, status=200)</code>  <code>classmethod</code>","text":"<p>Create a plain text response.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text content.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>200</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef text(cls, text: str, status: int = 200) -&gt; Response:\n    \"\"\"\n    Create a plain text response.\n\n    :param text: Text content.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"text/plain; charset=utf-8\"},\n        body=text.encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.StreamingResponse","title":"<code>StreamingResponse</code>","text":"<p>               Bases: <code>Response</code></p> <p>A class representing a streaming response.</p> <p>Inherits from Response.</p> <p>Attributes:     content (list[bytes] | iter[bytes]): Content to stream.     status (int): HTTP status code.     headers (dict[str, str]): Additional headers.</p> Source code in <code>macro\\response.py</code> <pre><code>class StreamingResponse(Response):\n    \"\"\"\n    A class representing a streaming response.\n\n    Inherits from Response.\n\n    Attributes:\n        content (list[bytes] | iter[bytes]): Content to stream.\n        status (int): HTTP status code.\n        headers (dict[str, str]): Additional headers.\n    \"\"\"\n\n    def __init__(\n        self,\n        content: list[bytes] | iter[bytes],\n        status: int = 200,\n        headers: dict[str, str] = None,\n    ):\n        super().__init__(status=status, headers=headers or {}, body=b\"\")\n        self.content = content\n\n        if \"Content-Length\" in self.headers:\n            del self.headers[\"Content-Length\"]\n\n    async def send(self, send_func: Callable[[dict], Awaitable[None]]) -&gt; None:\n        \"\"\"\n        Send the streaming response using the provided send function.\n\n        :param send_func: Callable to send the response.\n        \"\"\"\n        if self._sent:\n            raise RuntimeError(\"Response has already been sent\")\n\n        await send_func(\n            {\n                \"type\": \"http.response.start\",\n                \"status\": self.status,\n                \"headers\": self.prepare_headers(),\n            }\n        )\n\n        is_iterable = hasattr(self.content, \"__iter__\") and not isinstance(\n            self.content, (bytes, str)\n        )\n\n        if is_iterable:\n            for i, chunk in enumerate(self.content):\n                if not isinstance(chunk, bytes):\n                    chunk = str(chunk).encode(\"utf-8\")\n\n                await send_func(\n                    {\"type\": \"http.response.body\", \"body\": chunk, \"more_body\": True}\n                )\n\n            await send_func(\n                {\"type\": \"http.response.body\", \"body\": b\"\", \"more_body\": False}\n            )\n        else:\n            content = self.content\n            if not isinstance(content, bytes):\n                content = str(content).encode(\"utf-8\")\n\n            await send_func(\n                {\"type\": \"http.response.body\", \"body\": content, \"more_body\": False}\n            )\n\n        self._sent = True\n</code></pre>"},{"location":"api/response/#macro.response.StreamingResponse.error","title":"<code>error(message='Internal Server Error', status=500)</code>  <code>classmethod</code>","text":"<p>Create an error response.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Error message.</p> <code>'Internal Server Error'</code> <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>500</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef error(\n    cls, message: str = \"Internal Server Error\", status: int = 500\n) -&gt; Response:\n    \"\"\"\n    Create an error response.\n\n    :param message: Error message.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"text/plain; charset=utf-8\"},\n        body=message.encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.StreamingResponse.html","title":"<code>html(content, status=200)</code>  <code>classmethod</code>","text":"<p>Create an HTML response.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>HTML content as a string.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>200</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef html(cls, content: str, status: int = 200) -&gt; Response:\n    \"\"\"\n    Create an HTML response.\n\n    :param content: HTML content as a string.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"text/html; charset=utf-8\"},\n        body=content.encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.StreamingResponse.json","title":"<code>json(data, status=200)</code>  <code>classmethod</code>","text":"<p>Create a JSON response.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>Data to be serialized to JSON.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>200</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef json(cls, data: Any, status: int = 200) -&gt; Response:\n    \"\"\"\n    Create a JSON response.\n\n    :param data: Data to be serialized to JSON.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"application/json\"},\n        body=json.dumps(data).encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.StreamingResponse.prepare_headers","title":"<code>prepare_headers()</code>","text":"<p>Prepare headers for the response.</p> <p>Returns:</p> Type Description <code>list[tuple[bytes, bytes]]</code> <p>List of headers as tuples of bytes.</p> Source code in <code>macro\\response.py</code> <pre><code>def prepare_headers(self) -&gt; list[tuple[bytes, bytes]]:\n    \"\"\"\n    Prepare headers for the response.\n\n    :return: List of headers as tuples of bytes.\n    \"\"\"\n    final_headers = dict(self.headers)\n\n    if \"Content-Length\" not in final_headers:\n        final_headers[\"Content-Length\"] = str(len(self.body))\n\n    return [\n        (key.lower().encode(\"latin1\"), value.encode(\"latin1\"))\n        for key, value in final_headers.items()\n    ]\n</code></pre>"},{"location":"api/response/#macro.response.StreamingResponse.redirect","title":"<code>redirect(location, status=302)</code>  <code>classmethod</code>","text":"<p>Create a redirect response.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>str</code> <p>URL to redirect to.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>302</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef redirect(cls, location: str, status: int = 302) -&gt; Response:\n    \"\"\"\n    Create a redirect response.\n\n    :param location: URL to redirect to.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Location\": location},\n        body=f\"Redirecting to {location}\".encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/response/#macro.response.StreamingResponse.send","title":"<code>send(send_func)</code>  <code>async</code>","text":"<p>Send the streaming response using the provided send function.</p> <p>Parameters:</p> Name Type Description Default <code>send_func</code> <code>Callable[[dict], Awaitable[None]]</code> <p>Callable to send the response.</p> required Source code in <code>macro\\response.py</code> <pre><code>async def send(self, send_func: Callable[[dict], Awaitable[None]]) -&gt; None:\n    \"\"\"\n    Send the streaming response using the provided send function.\n\n    :param send_func: Callable to send the response.\n    \"\"\"\n    if self._sent:\n        raise RuntimeError(\"Response has already been sent\")\n\n    await send_func(\n        {\n            \"type\": \"http.response.start\",\n            \"status\": self.status,\n            \"headers\": self.prepare_headers(),\n        }\n    )\n\n    is_iterable = hasattr(self.content, \"__iter__\") and not isinstance(\n        self.content, (bytes, str)\n    )\n\n    if is_iterable:\n        for i, chunk in enumerate(self.content):\n            if not isinstance(chunk, bytes):\n                chunk = str(chunk).encode(\"utf-8\")\n\n            await send_func(\n                {\"type\": \"http.response.body\", \"body\": chunk, \"more_body\": True}\n            )\n\n        await send_func(\n            {\"type\": \"http.response.body\", \"body\": b\"\", \"more_body\": False}\n        )\n    else:\n        content = self.content\n        if not isinstance(content, bytes):\n            content = str(content).encode(\"utf-8\")\n\n        await send_func(\n            {\"type\": \"http.response.body\", \"body\": content, \"more_body\": False}\n        )\n\n    self._sent = True\n</code></pre>"},{"location":"api/response/#macro.response.StreamingResponse.set_content_type","title":"<code>set_content_type(content_type)</code>","text":"<p>Set the Content-Type header for the response.</p> <p>Parameters:</p> Name Type Description Default <code>content_type</code> <code>str</code> <p>Content-Type value.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>def set_content_type(self, content_type: str) -&gt; Response:\n    \"\"\"\n    Set the Content-Type header for the response.\n\n    :param content_type: Content-Type value.\n    :return: Response object.\n    \"\"\"\n    self.headers[\"Content-Type\"] = content_type\n    return self\n</code></pre>"},{"location":"api/response/#macro.response.StreamingResponse.set_cookie","title":"<code>set_cookie(name, value, max_age=None, expires=None, path='/', domain=None, secure=False, http_only=False, same_site=None)</code>","text":"<p>Set a cookie for the response.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Cookie name.</p> required <code>value</code> <code>str</code> <p>Cookie value.</p> required <code>max_age</code> <code>int</code> <p>Max-Age attribute.</p> <code>None</code> <code>expires</code> <code>str</code> <p>Expires attribute.</p> <code>None</code> <code>path</code> <code>str</code> <p>Path attribute.</p> <code>'/'</code> <code>domain</code> <code>str</code> <p>Domain attribute.</p> <code>None</code> <code>secure</code> <code>bool</code> <p>Secure attribute.</p> <code>False</code> <code>http_only</code> <code>bool</code> <p>HttpOnly attribute.</p> <code>False</code> <code>same_site</code> <code>str</code> <p>SameSite attribute.</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>def set_cookie(\n    self,\n    name: str,\n    value: str,\n    max_age: int = None,\n    expires: str = None,\n    path: str = \"/\",\n    domain: str = None,\n    secure: bool = False,\n    http_only: bool = False,\n    same_site: str = None,\n) -&gt; Response:\n    \"\"\"\n    Set a cookie for the response.\n\n    :param name: Cookie name.\n    :param value: Cookie value.\n    :param max_age: Max-Age attribute.\n    :param expires: Expires attribute.\n    :param path: Path attribute.\n    :param domain: Domain attribute.\n    :param secure: Secure attribute.\n    :param http_only: HttpOnly attribute.\n    :param same_site: SameSite attribute.\n    :return: Response object.\n    \"\"\"\n    cookie_parts = [f\"{name}={value}\"]\n\n    if max_age is not None:\n        cookie_parts.append(f\"Max-Age={max_age}\")\n    if expires is not None:\n        cookie_parts.append(f\"Expires={expires}\")\n    if path:\n        cookie_parts.append(f\"Path={path}\")\n    if domain:\n        cookie_parts.append(f\"Domain={domain}\")\n    if secure:\n        cookie_parts.append(\"Secure\")\n    if http_only:\n        cookie_parts.append(\"HttpOnly\")\n    if same_site:\n        cookie_parts.append(f\"SameSite={same_site}\")\n\n    cookie_header = \"; \".join(cookie_parts)\n\n    if \"Set-Cookie\" in self.headers:\n        self.headers[\"Set-Cookie\"] = (\n            self.headers[\"Set-Cookie\"] + \"\\n\" + cookie_header\n        )\n    else:\n        self.headers[\"Set-Cookie\"] = cookie_header\n\n    return self\n</code></pre>"},{"location":"api/response/#macro.response.StreamingResponse.set_header","title":"<code>set_header(key, value)</code>","text":"<p>Set a header for the response.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Header name.</p> required <code>value</code> <code>str</code> <p>Header value.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>def set_header(self, key: str, value: str) -&gt; Response:\n    \"\"\"\n    Set a header for the response.\n\n    :param key: Header name.\n    :param value: Header value.\n    :return: Response object.\n    \"\"\"\n    self.headers[key] = value\n    return self\n</code></pre>"},{"location":"api/response/#macro.response.StreamingResponse.text","title":"<code>text(text, status=200)</code>  <code>classmethod</code>","text":"<p>Create a plain text response.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text content.</p> required <code>status</code> <code>int</code> <p>HTTP status code.</p> <code>200</code> <p>Returns:</p> Type Description <code>Response</code> <p>Response object.</p> Source code in <code>macro\\response.py</code> <pre><code>@classmethod\ndef text(cls, text: str, status: int = 200) -&gt; Response:\n    \"\"\"\n    Create a plain text response.\n\n    :param text: Text content.\n    :param status: HTTP status code.\n    :return: Response object.\n    \"\"\"\n    response = cls(\n        status=status,\n        headers={\"Content-Type\": \"text/plain; charset=utf-8\"},\n        body=text.encode(\"utf-8\"),\n    )\n    return response\n</code></pre>"},{"location":"api/server/","title":"Server","text":""},{"location":"api/server/#macro.server.Macro","title":"<code>Macro</code>","text":"<p>A simple web framework for handling HTTP requests with support for dynamic paths and type casting.</p> Source code in <code>macro\\server.py</code> <pre><code>class Macro:\n    \"\"\"\n    A simple web framework for handling HTTP requests with support for dynamic paths and type casting.\n    \"\"\"\n\n    def __init__(self):\n        self.routes: dict[str, dict[str, RouteT]] = {}\n\n    async def __call__(self, scope: asgiref_typing.Scope, receive, send) -&gt; None:\n        if scope[\"type\"] == \"http\":\n            await self.handle_http(scope, receive, send)\n        else:\n            await send(\n                {\n                    \"type\": \"http.response.start\",\n                    \"status\": 400,\n                    \"headers\": [(b\"content-type\", b\"text/plain\")],\n                }\n            )\n            await send(\n                {\n                    \"type\": \"http.response.body\",\n                    \"body\": b\"Only HTTP requests are supported\",\n                }\n            )\n\n    async def handle_http(self, scope: asgiref_typing.HTTPScope, receive, send) -&gt; None:\n        \"\"\"\n        Handle HTTP requests.\n\n        :param scope: The scope of the request.\n        :param receive: The receive channel to get request data.\n        :param send: The send channel to send response data.\n        \"\"\"\n        headers, body = await self._parse(scope, receive)\n        path = scope[\"path\"]\n        method = scope[\"method\"]\n        fn, path_vars = self._find_route(path, method)\n        if fn is None:\n            response = Response(status=404, body=b\"Not Found\")\n        else:\n            try:\n                path_vars = self._cast_path_vars(fn, path_vars)\n            except ValueError:\n                response = Response(status=404, body=b\"Not Found\")\n            else:\n                request = Request(headers=headers, body=body)\n                response = await fn(request, Response, **path_vars)\n            await response.send(send)\n\n    def _find_route(\n        self, path: str, method: str\n    ) -&gt; typing.Tuple[typing.Optional[RouteT], dict]:\n        for route_path, methods in self.routes.items():\n            match = re.fullmatch(route_path, path)\n            if match and method in methods:\n                return methods[method], match.groupdict()\n        return None, {}\n\n    def _cast_path_vars(self, fn: RouteT, path_vars: dict) -&gt; dict:\n        sig = signature(fn)\n        for name, param in sig.parameters.items():\n            if name in path_vars and param.annotation != Parameter.empty:\n                try:\n                    path_vars[name] = param.annotation(path_vars[name])\n                except (TypeError, ValueError):\n                    raise ValueError(f\"Invalid type for path variable '{name}'\")\n        return path_vars\n\n    async def _parse(\n        self, scope: asgiref_typing.HTTPScope, receive\n    ) -&gt; tuple[RequestHeader, bytes]:\n        headers = RequestHeader()\n        headers._method = scope.get(\"method\", \"\")\n        headers._path = scope.get(\"path\", \"\")\n        headers._http_version = f\"HTTP/{scope.get('http_version', '1.1')}\"\n\n        for name, value in scope.get(\"headers\", []):\n            headers[name.decode(\"latin1\")] = value.decode(\"latin1\")\n\n        body = b\"\"\n        more_body = True\n\n        while more_body:\n            message = await receive()\n            if message[\"type\"] == \"http.request\":\n                body += message.get(\"body\", b\"\")\n                more_body = message.get(\"more_body\", False)\n\n        return headers, body\n\n    def route(\n        self, path: str, method: str = \"GET\"\n    ) -&gt; typing.Callable[[RouteT], RouteT]:\n        \"\"\"\n        Decorator to register a route handler for a specific path and method.\n\n        :param path: The route path, which can include dynamic segments.\n        :param method: The HTTP method (default is \"GET\").\n        :return: The decorator function.\n        \"\"\"\n\n        def decorator(func: RouteT) -&gt; RouteT:\n            # Convert dynamic path to regex with named groups\n            path_regex = re.sub(r\"{([^/]+)}\", r\"(?P&lt;\\1&gt;[^/]+)\", path)\n            if path_regex not in self.routes:\n                self.routes[path_regex] = {}\n\n            self.routes[path_regex][method] = func\n            return func\n\n        return decorator\n</code></pre>"},{"location":"api/server/#macro.server.Macro.handle_http","title":"<code>handle_http(scope, receive, send)</code>  <code>async</code>","text":"<p>Handle HTTP requests.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>HTTPScope</code> <p>The scope of the request.</p> required <code>receive</code> <p>The receive channel to get request data.</p> required <code>send</code> <p>The send channel to send response data.</p> required Source code in <code>macro\\server.py</code> <pre><code>async def handle_http(self, scope: asgiref_typing.HTTPScope, receive, send) -&gt; None:\n    \"\"\"\n    Handle HTTP requests.\n\n    :param scope: The scope of the request.\n    :param receive: The receive channel to get request data.\n    :param send: The send channel to send response data.\n    \"\"\"\n    headers, body = await self._parse(scope, receive)\n    path = scope[\"path\"]\n    method = scope[\"method\"]\n    fn, path_vars = self._find_route(path, method)\n    if fn is None:\n        response = Response(status=404, body=b\"Not Found\")\n    else:\n        try:\n            path_vars = self._cast_path_vars(fn, path_vars)\n        except ValueError:\n            response = Response(status=404, body=b\"Not Found\")\n        else:\n            request = Request(headers=headers, body=body)\n            response = await fn(request, Response, **path_vars)\n        await response.send(send)\n</code></pre>"},{"location":"api/server/#macro.server.Macro.route","title":"<code>route(path, method='GET')</code>","text":"<p>Decorator to register a route handler for a specific path and method.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The route path, which can include dynamic segments.</p> required <code>method</code> <code>str</code> <p>The HTTP method (default is \"GET\").</p> <code>'GET'</code> <p>Returns:</p> Type Description <code>Callable[[RouteT], RouteT]</code> <p>The decorator function.</p> Source code in <code>macro\\server.py</code> <pre><code>def route(\n    self, path: str, method: str = \"GET\"\n) -&gt; typing.Callable[[RouteT], RouteT]:\n    \"\"\"\n    Decorator to register a route handler for a specific path and method.\n\n    :param path: The route path, which can include dynamic segments.\n    :param method: The HTTP method (default is \"GET\").\n    :return: The decorator function.\n    \"\"\"\n\n    def decorator(func: RouteT) -&gt; RouteT:\n        # Convert dynamic path to regex with named groups\n        path_regex = re.sub(r\"{([^/]+)}\", r\"(?P&lt;\\1&gt;[^/]+)\", path)\n        if path_regex not in self.routes:\n            self.routes[path_regex] = {}\n\n        self.routes[path_regex][method] = func\n        return func\n\n    return decorator\n</code></pre>"}]}